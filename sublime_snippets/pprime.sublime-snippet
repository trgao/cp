<snippet>
	<content><![CDATA[
struct pprime {
private:
    using u64 = uint64_t;
    using u128 = __uint128_t;

    u64 binpower(u64 base, u64 e, u64 mod) {
        u64 result = 1;
        base %= mod;
        while (e) {
            if (e & 1) result = (u128) result * base % mod;
            base = (u128) base * base % mod;
            e >>= 1;
        }
        return result;
    }

    bool check_composite(u64 n, u64 a, u64 d, ll s) {
        u64 x = binpower(a, d, n);
        if (x == 1 || x == n - 1) return false;
        for (ll r = 1; r < s; r++) {
            x = (u128) x * x % n;
            if (x == n - 1) return false;
        }
        return true;
    };

public:
    bool isProbablePrime(ll n) { // returns true if n is prime, else returns false.
        if (n < 2) return false;
        ll r = 0;
        u64 d = n - 1;
        while ((d & 1) == 0) {
            d >>= 1;
            r++;
        }
        for (ll a : {2ll, 3ll, 5ll, 7ll, 11ll, 13ll, 17ll, 19ll, 23ll, 29ll, 31ll, 37ll}) {
            if (n == a) return true;
            if (check_composite(n, a, d, r)) return false;
        }
        return true;
    }
};
]]></content>
	<tabTrigger>pprime</tabTrigger>
	<description>Miller-Rabin random algo to test prime</description>
	<scope>source.c++</scope>
</snippet>
