<snippet>
	<content><![CDATA[
#define LSOne(S) ((S) & -(S))

class FenwickTree {                              // index 0 is not used
private:
    vector<ll> ft;                                        // internal FT is an array
public:
    FenwickTree(ll m) { ft.assign(m+1, 0); }      // create an empty FT

    void build(const vector<ll> &f) {
        ll m = (ll)f.size()-1;                     // note f[0] is always 0
        ft.assign(m+1, 0);
        for (ll i = 1; i <= m; ++i) {               // O(m)
            ft[i] += f[i];                             // add this value
            if (i+LSOne(i) <= m)                       // i has parent
                ft[i+LSOne(i)] += ft[i];                 // add to that parent
        }
    }

    FenwickTree(const vector<ll> &f) { build(f); }        // create FT based on f

    FenwickTree(ll m, const vector<ll> &s) {              // create FT based on s
        vector<ll> f(m+1, 0);
        for (ll i = 0; i < (ll)s.size(); ++i)      // do the conversion first
            ++f[s[i]];                                 // in O(n)
        build(f);                                    // in O(m)
    }

    ll rsq(ll j) {                                // returns RSQ(1, j)
        ll sum = 0;
        for (; j; j -= LSOne(j))
            sum += ft[j];
        return sum;
    }

    ll rsq(ll i, ll j) { return rsq(j) - rsq(i-1); } // inc/exclusion

    // updates value of the i-th element by v (v can be +ve/inc or -ve/dec)
    void update(ll i, ll v) {
        for (; i < (ll)ft.size(); i += LSOne(i))
            ft[i] += v;
    }

    ll select(ll k) {                             // O(log m)
        ll p = 1;
        while (p*2 < (ll)ft.size()) p *= 2;
        ll i = 0;
        while (p) {
            if (k > ft[i+p]) {
                k -= ft[i+p];
                i += p;
            }
            p /= 2;
        }
        return i+1;
    }
};

class RUPQ {                                     // RUPQ variant
private:
    FenwickTree ft;                                // internally use PURQ FT
public:
    RUPQ(ll m) : ft(FenwickTree(m)) {}
    void range_update(ll ui, ll uj, ll v) {
        ft.update(ui, v);                            // [ui, ui+1, .., m] +v
        ft.update(uj+1, -v);                         // [uj+1, uj+2, .., m] -v
    }                                              // [ui, ui+1, .., uj] +v
    ll point_query(ll i) { return ft.rsq(i); }    // rsq(i) is sufficient
};

class RURQ  {                                    // RURQ variant
private:                                         // needs two helper FTs
    RUPQ rupq;                                     // one RUPQ and
    FenwickTree purq;                              // one PURQ
public:
    RURQ(ll m) : rupq(RUPQ(m)), purq(FenwickTree(m)) {} // initialization
    void range_update(ll ui, ll uj, ll v) {
        rupq.range_update(ui, uj, v);                // [ui, ui+1, .., uj] +v
        purq.update(ui, v*(ui-1));                   // -(ui-1)*v before ui
        purq.update(uj+1, -v*uj);                    // +(uj-ui+1)*v after uj
    }
    ll rsq(ll j) {
        return rupq.point_query(j)*j -               // optimistic calculation
               purq.rsq(j);                          // cancelation factor
    }
    ll rsq(ll i, ll j) { return rsq(j) - rsq(i-1); } // standard
};
]]></content>
	<tabTrigger>fenwick</tabTrigger>
	<description>fenwick tree</description>
	<scope>source.c++</scope>
</snippet>
