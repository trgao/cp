<snippet>
	<content><![CDATA[
struct vertex {
    char alphabet;
    bool exist;
    vector<vertex*> child;
    vertex(char a): alphabet(a), exist(false) { child.assign(26, NULL); }
};

class Trie {                                     // this is TRIE
private:                                         // NOT Suffix Trie
    vertex* root;
public:
    Trie() { root = new vertex('!'); }

    void insert(string word) {                     // insert a word into trie
        vertex* cur = root;
        for (ll i = 0; i < (ll)word.size(); ++i) { // O(n)
          ll alphaNum = word[i]-'A';
          if (cur->child[alphaNum] == NULL)          // add new branch if NULL
                cur->child[alphaNum] = new vertex(word[i]);
          cur = cur->child[alphaNum];
        }
        cur->exist = true;
    }

  bool search(string word) {                     // true if word in trie
    vertex* cur = root;
    for (ll i = 0; i < (ll)word.size(); ++i) { // O(m)
        ll alphaNum = word[i]-'A';
        if (cur->child[alphaNum] == NULL)          // not found
            return false;
        cur = cur->child[alphaNum];
    }
    return cur->exist;                           // check exist flag
  }

  bool startsWith(string prefix) {               // true if match prefix
    vertex* cur = root;
    for (ll i = 0; i < (ll)prefix.size(); ++i) {
        ll alphaNum = prefix[i]-'A';
        if (cur->child[alphaNum] == NULL)          // not found
            return false;
        cur = cur->child[alphaNum];
    }
    return true;                                 // reach here, return true
  }
};
]]></content>
	<tabTrigger>trie</tabTrigger>
	<scope>source.c++</scope>
</snippet>
