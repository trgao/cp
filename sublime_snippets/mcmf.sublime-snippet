<snippet>
	<content><![CDATA[
const ll INF = 1e18;

class min_cost_max_flow {
private:
    ll V;
    ll total_cost;
    vector<tuple<ll, ll, ll, ll>> EL;
    vector< vector<ll> > AL;
    vector<ll> d, last, vis;

    bool SPFA(ll s, ll t) { // SPFA to find augmenting path in residual graph
        d.assign(V, INF); d[s] = 0; vis[s] = 1;
        queue<ll> q({s});
        while (!q.empty()) {
            ll u = q.front(); q.pop(); vis[u] = 0;
            for (auto &idx : AL[u]) {                  // explore neighbors of u
                auto &[v, cap, flow, cost] = EL[idx];          // stored in EL[idx]
                if ((cap-flow > 0) && (d[v] > d[u] + cost)) {      // positive residual edge
                    d[v] = d[u]+cost;
                    if(!vis[v]) q.push(v), vis[v] = 1;
                }
            }
        }
        return d[t] != INF;                           // has an augmenting path
    }

    ll DFS(ll u, ll t, ll f = INF) {             // traverse from s->t
        if ((u == t) || (f == 0)) return f;
        vis[u] = 1;
        for (ll &i = last[u]; i < (ll)AL[u].size(); ++i) { // from last edge
        auto &[v, cap, flow, cost] = EL[AL[u][i]];
        if (!vis[v] && d[v] == d[u]+cost) {                      // in current layer graph
            if (ll pushed = DFS(v, t, min(f, cap-flow))) {
        total_cost += pushed * cost;
            flow += pushed;
            auto &[rv, rcap, rflow, rcost] = EL[AL[u][i]^1]; // back edge
            rflow -= pushed;
            vis[u] = 0;
            return pushed;
            }
        }
        }
        vis[u] = 0;
        return 0;
    }

public:
    min_cost_max_flow(ll initialV) : V(initialV), total_cost(0) {
        EL.clear();
        AL.assign(V, vector<ll>());
        vis.assign(V, 0);
    }

    // if you are adding a bidirectional edge u<->v with weight w into your
    // flow graph, set directed = false (default value is directed = true)
    void add_edge(ll u, ll v, ll w, ll c, bool directed = true) {
        if (u == v) return;                          // safeguard: no self loop
        EL.emplace_back(v, w, 0, c);                 // u->v, cap w, flow 0, cost c
        AL[u].push_back(EL.size()-1);                // remember this index
        EL.emplace_back(u, 0, 0, -c);                // back edge
        AL[v].push_back(EL.size()-1);                // remember this index
        if (!directed) add_edge(v, u, w, c);         // add again in reverse
    }

    pair<ll, ll> mcmf(ll s, ll t) {
        ll mf = 0;                                   // mf stands for max_flow
        while (SPFA(s, t)) {                          // an O(V^2*E) algorithm
            last.assign(V, 0);                         // important speedup
            while (ll f = DFS(s, t))                   // exhaust blocking flow
                mf += f;
        }
        return {mf, total_cost};
    }

    void debug() {
        for (ll i = 0; i < V; ++i) {
            for (ll j : AL[i]) {
                auto& [v, c, f, h] = EL[j];
                cout << "From:" << i << " To:" << v << " Cap:" << c << " Flow:" << f << " Cost:" << h << endl;
            }
        }
        cout << "----------MFDEBUG----------\n\n";
    }
};
]]></content>
	<tabTrigger>mcmf</tabTrigger>
	<description>min cost max flow</description>
	<scope>source.c++</scope>
</snippet>
