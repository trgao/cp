<snippet>
	<content><![CDATA[
const ll MAX_N = 450010;                        // can go up to 450K chars
char T[MAX_N];
char P[MAX_N];

class SuffixArray {
private:
      vector<ll> RA;                                         // rank array

    void countingSort(ll k) {                     // O(n)
        ll maxi = max(300ll, n);                      // up to 255 ASCII chars
        vector<ll> c(maxi, 0);                               // clear frequency table
        for (ll i = 0; i < n; ++i)                  // count the frequency
          ++c[i+k < n ? RA[i+k] : 0];                // of each integer rank
        for (ll i = 0, sum = 0; i < maxi; ++i) {
            ll t = c[i]; c[i] = sum; sum += t;
        }
        vector<ll> tempSA(n);
        for (ll i = 0; i < n; ++i)                  // sort SA
            tempSA[c[SA[i]+k < n ? RA[SA[i]+k] : 0]++] = SA[i];
        swap(SA, tempSA);                            // update SA
    }

    void constructSA() {                           // can go up to 400K chars
        SA.resize(n);
        iota(SA.begin(), SA.end(), 0);               // the initial SA
        RA.resize(n);
        for (ll i = 0; i < n; ++i) RA[i] = T[i];    // initial rankings
        for (ll k = 1; k < n; k <<= 1) {            // repeat log_2 n times
            // this is actually radix sort
            countingSort(k);                           // sort by 2nd item
            countingSort(0);                           // stable-sort by 1st item
            vector<ll> tempRA(n);
            ll r = 0;
            tempRA[SA[0]] = r;                         // re-ranking process
            for (ll i = 1; i < n; ++i)                // compare adj suffixes
                tempRA[SA[i]] = // same pair => same rank r; otherwise, increase r
                    ((RA[SA[i]] == RA[SA[i-1]]) && (RA[SA[i]+k] == RA[SA[i-1]+k])) ?
                        r : ++r;
            swap(RA, tempRA);                          // update RA
            if (RA[SA[n-1]] == n-1) break;             // nice optimization
        }
    }

    void computeLCP() {
        vector<ll> Phi(n);
        vector<ll> PLCP(n);
        PLCP.resize(n);
        Phi[SA[0]] = -1;                             // default value
        for (ll i = 1; i < n; ++i)                  // compute Phi in O(n)
            Phi[SA[i]] = SA[i-1];                      // remember prev suffix
        for (ll i = 0, L = 0; i < n; ++i) {         // compute PLCP in O(n)
            if (Phi[i] == -1) { PLCP[i] = 0; continue; } // special case
            while ((i+L < n) && (Phi[i]+L < n) && (T[i+L] == T[Phi[i]+L]))
                ++L;                                     // L incr max n times
            PLCP[i] = L;
            L = max(L-1, 0ll);                           // L dec max n times
        }
        LCP.resize(n);
        for (ll i = 0; i < n; ++i)                  // compute LCP in O(n)
            LCP[i] = PLCP[SA[i]];                      // restore PLCP
    }

public:
    const char* T;                                 // the input string
    const ll n;                                   // the length of T
    vector<ll> SA;                                         // Suffix Array
    vector<ll> LCP;                                        // of adj sorted suffixes

    SuffixArray(const char* initialT, const ll _n) : T(initialT), n(_n) {
        constructSA();                               // O(n log n)
        computeLCP();                                // O(n)
    }

    pair<ll, ll> stringMatching(const char *P) {             // in O(m log n)
        ll m = (ll)strlen(P);                      // usually, m < n
        ll lo = 0, hi = n-1;                        // range = [0..n-1]
        while (lo < hi) {                            // find lower bound
            ll mid = (lo+hi) / 2;                     // this is round down
            ll res = strncmp(T+SA[mid], P, m);        // P in suffix SA[mid]?
            (res >= 0) ? hi = mid : lo = mid+1;        // notice the >= sign
        }
        if (strncmp(T+SA[lo], P, m) != 0) return {-1, -1}; // if not found
        pair<ll, ll> ans; ans.first = lo;
        hi = n-1;                                    // range = [lo..n-1]
        while (lo < hi) {                            // now find upper bound
            ll mid = (lo+hi) / 2;
            ll res = strncmp(T+SA[mid], P, m);
            (res > 0) ? hi = mid : lo = mid+1;         // notice the > sign
        }
        if (strncmp(T+SA[hi], P, m) != 0) --hi;      // special case
        ans.second = hi;
        return ans;                                  // returns (lb, ub)
    }                                              // where P is found

    pair<ll, ll> LRS() {                                     // (LRS length, index)
        ll idx = 0, maxLCP = -1;
        for (ll i = 1; i < n; ++i)                  // O(n), start from i = 1
            if (LCP[i] > maxLCP) maxLCP = LCP[i], idx = i;
        return {maxLCP, idx};
    }

    pair<ll, ll> LCS(ll split_idx) {                        // (LCS length, index)
        ll idx = 0, maxLCP = -1;
        for (ll i = 1; i < n; ++i) {                // O(n), start from i = 1
            // if suffix SA[i] and suffix SA[i-1] came from the same string, skip
            if ((SA[i] < split_idx) == (SA[i-1] < split_idx)) continue;
            if (LCP[i] > maxLCP) maxLCP = LCP[i], idx = i;
        }
        return {maxLCP, idx};
    }

    void print() {
        for (ll i = 0; i < n; ++i) cout << T + SA[i] << " " << LCP[i] << endl;
    }
};
]]></content>
	<tabTrigger>suffixarray</tabTrigger>
	<scope>source.c++</scope>
</snippet>
